 不要被迷惑了： 有一些语言中有惰性求值和延时计算的特性, 它们也被称为"promises" --例如Scheme. Javascript中的promise代表一种已经发生的状态, 而且可以通过回调方法链在一起. 如果你想要的是表达式的延时计算, 考虑无参数的"箭头方法": f = () => 表达式 创建惰性求值的表达式, 使用 f() 求值.  注意： 如果一个promise对象处在fulfilled或rejected状态而不是pending状态，那么它也可以被称为settled状态。你可能也会听到一个术语resolved ，它表示promise对象处于fulfilled状态。（此处有待商榷。按本文的原英文翻译resolved表示fulfilled，但是后面的术语链接又表明resolved和fulfilled并不是一样。）关于promise的术语， Domenic Denicola 的 States and fates 有更多详情可供参考。 